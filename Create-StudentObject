<#
.Synopsis
Creates new students in A.D
.DESCRIPTION
This is the 'Master' cmdlet.  You can also pipe in a csv as long as the CSV headers match the parameter names.
Creates new students in A.D, assigns Papercut credit, adds to correct groups, configures AD. Attribs. creates HomeDir etc etc
.PARAMETER CSVUserObject
This is the output from 'Import-UserCSV' cmdlet and is a user object created from an imported CSV file.
.EXAMPLE
import-Csv C:\output.csv -Header "ID","Firstname","Surname","DOB","CourseCode","CourseDescription","UnknownField1","CourseStart","CourseEnd","UnknownField2","UnknownField3" | select -first 12 | Import-UserCSV | Create-StudentObject -verbose
.INPUTS
Accepts the PSObject output from Import-UserCSV
.NOTES
Version: 1.0
Date: 17 September 2014
Created By: OH
.LINK
http://www.fearthemonkey.co.uk
.LINK
https://github.com/ozthe2/Powershell.git
.LINK
Import-UserCSV
#>

Function Create-StudentObject {

        [CmdletBinding()]
        
        Param(              
            [PARAMETER(Mandatory=$True,
            ValueFromPipeline=$True,
            ValueFromPipelineByPropertyName=$True)]        
            [psobject[]]$CSVUserObject
        )

    BEGIN {

        #Log locations for the logging function parameter
        $LogLocation = "To Be Completed"
        $ErrorLogLocation = "To Be Completed"           
    }
    
    PROCESS {

        Foreach ($csvUser in $CSVUserObject) {
            $Continue = $true  
       
            #1.
            # Check that DOB is present, if not, set to eight zero's.
            write-Verbose "Checking that the Date of Birth is present for student: $($csvuser.firstname) $($csvuser.Surname)"
            #True = Missing DOB, $False = DOB present
            if (Validate-IsEmpty -Text $csvUser.dob ){
                Write-Warning "The Date of Birth field is missing for $($csvuser.Firstname) $($csvuser.Surname) so will now populate it with eight zeros."            
                $csvuser.DOB = '00000000'
            } else {
                write-verbose "Date of Birth is present."
            }

            #2.
            #Ensure that there are no strange characters in the surname
            Write-verbose "Stripping out illegal characters from surname."
            $csvuser.Surname = Convert-ToFriendlyName -Text $csvUser.Surname

            #3.
            #Create the student username made up of the first three chars of the surname followed by the student number
            write-verbose "Creating Student username"
            $Username = Create-StudentUserName -ID $csvuser.ID -Surname $csvuser.Surname

            #4.
            #Check to ensure that the ID number falls within the accepted range for our organisation       
            if(!(Validate-ID -ID $csvuser.ID)) {
                write-warning "I.D number is not valid."
                write-warning "Skipping processing of this user: $username"                
                break;
            }        
       
            #5.
            #See if this user already exists in Active Directory.  If they exist, then the $ADUser var contains an object that has a selection of 
            #properties from the Active Directory user account.  (Use $ADUser | GM to see properties returned.)
            $ADUser = Search-UserInAD -ID $csvUser.ID

            if($ADUser.employeeNumber -eq $NULL) {
                Write-warning "The user: $Username cannot be found in Active Directory."
                Write-verbose "Creating new user account..."
                # Do something (next stage)
            } else {
                Write-verbose "Processing next stage..."
                # Do something...(next stage)            
            }
       
       #>
        } # End Foreach       
        Write-verbose "`n"






    } # End process
    
    END {}
} # End Function



# --- TESTING ---

import-Csv C:\output.csv -Header "ID","Firstname","Surname","DOB","CourseCode","CourseDescription","UnknownField1","CourseStart","CourseEnd","UnknownField2","UnknownField3" | select -first 15 | Import-UserCSV | Create-StudentObject -verbose


#help Create-StudentObject -full

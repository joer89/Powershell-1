
$Global:NewIP
$Global:PrinterDNSName
$PrintServer = "dhcp1"
$DHCPServer = "dhcp1"
$DNSServer = "dhcp1"
$DNSZone = "oh.local"
#Csv file should contain three headers of: Scope,PrinterName,MAC
$PathToCSV = "C:\printers.csv"

write-output "Reading in CSV file..."
$PrintersToMigrate = import-csv $PathToCSV
write-output "Done"
write-output "-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-`n"




Function Create-NewPrinterPort {
param (
[psobject]$ThePrinter
)

write-output "Creating the new printer port on the print server..."
    try {
        Add-PrinterPort -ComputerName $PrintServer -Name $Global:PrinterDNSName -PrinterHostAddress $global:newip -PortNumber 9100 -ea stop
        write-output "Port created!"
    } catch{
        write-error "Unable to create the printer port."
        $ThePrinter.printername |  Out-File c:\PrinterPortCreationErrors.err -Append
    }
}


Function Remove-OldPrinterPort {
param (
[psobject]$ThePrinter
)

write-output "Removing the old printer port on the print server..."
    try {
        Remove-PrinterPort -ComputerName $printserver -name $ThePrinter.port        
        write-output "Port deleted!"
    } catch{
        write-error "Unable to create the printer port."
        $ThePrinter.printername |  Out-File c:\OldPrinterPortRemovalErrors.err -Append
    }
}



Function Modify-PrinterPortOnPrinter {
param (
[psobject]$ThePrinter
)

    try {
        write-output "Changing port on printer..."
        set-printer -ComputerName $printserver -Name $theprinter.printername -PortName $Global:PrinterDNSName -ea stop
        write-output "Done!"
    } catch {
        write-error "Unable to modify port on printer"
        $ThePrinter.printername |  Out-File c:\PrinterPortModifyError.err -Append
    }

}#end Modify-PrinterPort




Function Extract-IPAddress {
    param (
        [string]$Port
    )
    # Returns the IP address of the printer as
    # we are getting it from the port name and
    # it is usually preceeded by PAPERCUT_

    if ($Port.contains("PAPERCUT_")) {       
        return ($Port.Split("_")[1])
    } else {
        return $Port
    }
}#End Extract-IPAddress

Function Check-ExistingDHCPReservation {
    #Checks to see if there is an existing dhcp reservation
    param (
        [PSObject]$PrinterObject
    )

    $AllScopes = Get-DhcpServerv4Scope -ComputerName $PrinterObject.DHCPServer    

    foreach ($Scope in $AllScopes) {
        try {    
                return Get-DhcpServerv4Reservation -ComputerName $PrinterObject.dhcpserver -IPAddress $PrinterObject.printerip -ea Stop | select scopeid
        } catch {
                write-warning "No existing reservation found to delete."
                return $false
        }    
    }#end foreach
}#end Check_ExistingDHCPReservation

Function Delete-ExistingDHCPReservation {
    param (
        [String]$DHCPServer,
        [string]$IPReservation
    )
    
    write-warning "Deleting existing reservation: $IPReservation" 
    try {
        Remove-DhcpServerv4Reservation -ComputerName $DHCPServer -IPAddress $IPReservation 
        write-warning "Reservation deleted"
    } catch {
        write-error "Unable to delete existing reservation for IPaddress: $ipreservation`n"
        "Error deleting reservation: $IPReservation" | out-file "c:\DeletePrinterReservationError.err" -Append
    }
    

}#end Delete_NewDHCPReservation

Function Add-NewDHCPReservation {
    param (
        [psobject]$PrinterObj
    )
    
    #Get the next 'last' available IPAddress for the required subnet
    $Global:NewIP = Get-DhcpServerv4FreeIPAddress -ComputerName $PrinterObj.dhcpserver -ScopeId $printerobj.scopeid -NumAddress 1022 | select -last 1

    write-output "Adding new DHCP reservation of $($Global:newip) to scope: $($PrinterObj.scopeid)"

    #Now add the new reservation
    try {
        Add-DhcpServerv4Reservation -scopeid $printerobj.scopeid -ComputerName $printerobj.dhcpserver -IPAddress $Global:NewIP -ClientId $printerobj.mac -Name $printerobj.printername -Type Both -ea Stop 
    } catch {
        $ReservationErrMsg = "Unable to add reservation for scope: $($printerobj.scopeid), New IP address of: $($Global:newip), Printer name: $($printerobj.printername) Printer MAC: $($printerobj.mac)"
        write-warning $ReservationErrMsg
        $ReservationErrMsg | out-file "c:\ReservationAddError.err"         
    }




}#end Add_NewDHCPReservation

#Script Entry point....
foreach ($CSVPrinter in $PrinterstoMigrate) {    
    
    try {        
        $Printer = Get-Printer -ComputerName $PrintServer -Name $CSVPrinter.PrinterName -ErrorAction stop
        $Continue = $True

    } catch {
        $ErrorMessage = "Unable to process $($CSVPrinter.printername)`n"
        write-error $ErrorMessage
        $($csvprinter.printername) | Out-File c:\PrinterMigrationErrors.txt -Append
        $Continue=$false
    }        
    
    if ($Continue) {
        #Create Custom Printer Object

        $obj =  [PSCustomObject] @{
                    ScopeID = $CSVPrinter.Scope
                    PrinterName = $CSVPrinter.PrinterName
                    MAC = $CSVPrinter.MAC
                    Port = $printer.Portname
                    PrinterIP = Extract-IPAddress -Port $printer.PortName
                    DHCPServer = $DHCPServer 
                      
                }#End PSCustomObject

                $a = $CSVPrinter.PrinterName.replace(" ","") 
                $Global:PrinterDNSName = $a




        #open the 'printer admin web page in order to set it to dhcp and change netbiosname
        start-process "http://$($obj.PrinterIP)"
        pause
          
        Write-output "Processing $($obj.PrinterName)`n"

        #Check for existing DHCP reservation
        $ScopeResult = Check-ExistingDHCPReservation -PrinterObject $obj

        #Delete existing DHCP reservation if there was an existing reservation found
        if ($ScopeResult -ne $false) {
            Write-warning "An existing reservation of $($obj.printerip) was found in the scope: $($ScopeResult.scopeid.ipaddresstostring)"
            #Call the function that deletes the reservation           
            Delete-ExistingDHCPReservation -DHCPServer $obj.DHCPServer -IPReservation $obj.PrinterIP
        }

        #Add new reservation to subnet specified in the CSV
        Add-NewDHCPReservation -PrinterObj $obj


        <#  ------------- May not be required! -------------------

        #Delete existing DNS entry
        
        try {
            Get-DnsServerResourceRecord -ComputerName $DNSServer -RRType A -Name $Global:PrinterDNSName -ZoneName $DNSZone -ea stop | Remove-DnsServerResourceRecord -ComputerName $DNSServer -ZoneName $DNSZone -ea stop
            write-output "Deleting existing DNS entry"
        } catch {
            write-warning "No existing DNS entry found for $($Global:PrinterDNSName)"
        }

        #Create new DNS entry
        write-output "Adding new DNS record"
        Add-DnsServerResourceRecordA -ComputerName $DNSServer -name $Global:PrinterDNSName -ZoneName $dnszone -IPv4Address $Global:NewIP -CreatePtr -ea SilentlyContinue
        write-output "Done!"

            ------------------------------------------------------  #>


            
        #Create the new TCP port on the print server
        Create-NewPrinterPort -ThePrinter $obj
                
        #Modify the existing printer port on the printer to the new one.
        Modify-PrinterPortOnPrinter -ThePrinter $obj

        #Remove the new TCP port on the print server
        Remove-OldPrinterPort -ThePrinter $Obj

        #Write-output of printer details to text file...
        "            Printer Name: $($obj.PrinterName)" | out-file c:\Printers.txt -Append
        "                     MAC: $($obj.mac)" | out-file c:\Printers.txt -Append        
        "           IP (Original): $($obj.PrinterIP)" | out-file c:\Printers.txt -Append
        "                IP (New): $($Global:NewIP)" | out-file c:\Printers.txt -Append
        "              Port (Old): $($printer.PortName)" | out-file c:\Printers.txt -Append
        "              Port (New): $($Global:PrinterDNSName)" | out-file c:\Printers.txt -Append        
        "--------------------------------------------------`n" | out-file c:\Printers.txt -Append

        

       
    
    }#End If

    write-output "`n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-`n"   
}#End Foreach


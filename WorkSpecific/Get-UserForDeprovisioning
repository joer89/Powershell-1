<#
.Synopsis
Gets a user that can be deprovisioned in A.D
.DESCRIPTION
Creates a filtered result of users either staff or students that meet predertmined criterea that can be deleted in Active Directory.
.PARAMETER UserType
Used for targetting either staff or student accounts.
.PARAMETER DoNotDisplayUsers
If you specify this switch then the only output will be the total number of users that can be deleted.  If you do not use this switch then the user account data will be output as well as the total count.
.EXAMPLE
Get-UserForDeProvisioning -UserType Student

This gets a list of all Student users that can be deleted from Active directory
.EXAMPLE
Get-UserForDeProvisioning -UserType Staff

This gets a list of all Staff users that can be deleted from Active directory
.NOTES
Version: 1
Date: 12 May 2015
Created By: OH
.LINK
http://www.fearthemonkey.co.uk
.LINK
https://github.com/ozthe2/Powershell.git
#>

Function Get-UserForDeProvisioning {

            [CmdletBinding()]
        
        Param(              
            [PARAMETER(Mandatory=$True)]
            [ValidateSet("Staff","Student")]                  
            [string]$UserType,
            
            [PARAMETER(Mandatory=$False)]
            [Switch]$DoNotDisplayUsers

         )

    BEGIN {             
        
        
        #Staff accounts Target deletion date is 12 months from current date, Students 18 months from current date.
        #Also set the search root for Get-ADUser and then get the users based on different filter criterea
        if ($usertype -eq "Staff") {            
            $TargetDeletionDate = (get-date).AddYears(-1)
            $SearchRoot='ou=XXX,ou=XXX,ou=XXX,ou=XXX,XXX=XXX,dc=XXX'
            $Users = Get-ADUser -Filter '(AccountExpirationDate -ge "01/01/2000" -and AccountExpirationDate -le $targetdeletiondate) -and employeeType -eq $usertype -and whencreated -le $targetdeletiondate -and (Lastlogondate -ge "01/01/2000" -and lastlogondate -le $targetdeletiondate)'  -properties sn,displayname,accountexpirationdate,enabled,mail,lastlogondate,accountexpires,userPrincipalName,pwdlastset,employeeNumber,employeeType,whencreated,LastLogonTimeStamp -SearchBase $SearchRoot -SearchScope OneLevel
        } else {            
            $TargetDeletionDate = (get-date).AddMonths(-18)
            $SearchRoot='ou=XXX,ou=XXX,ou=XXX,ou=XXX,dc=XXX,dc=XXX'
            $Users = Get-ADUser -Filter '(AccountExpirationDate -ge "01/01/2000" -and AccountExpirationDate -le $targetdeletiondate) -and employeeType -eq $usertype -and whencreated -le $targetdeletiondate -and (Lastlogondate -ge "01/01/2000" -and lastlogondate -le $targetdeletiondate)'  -properties sn,displayname,accountexpirationdate,enabled,mail,lastlogondate,accountexpires,userPrincipalName,pwdlastset,employeeNumber,employeeType,whencreated,LastLogonTimeStamp -SearchBase $SearchRoot -SearchScope OneLevel
        }
            
        #Check that employee numbers are within the accepted range and add users to array: FinalFilteredUsers - THIS ARRAY HOLDS THE FINAL USERS AFTER ALL FILTERS HAVE BEEN APPLIED        
        $FinalFilteredUsers=@()

        #Staff accounts...
        if ($usertype -eq "Staff") {
            foreach ($user in $Users) {
                if ([long]$user.employeenumber -ge 00001 -and [long]$user.employeenumber -le 89999) {            
                    $FinalFilteredUsers+=$user
                }
             }#end foreach
        } else {
            foreach ($user in $Users) {
                if (([long]$user.employeenumber -ge 10000000 -and [long]$user.employeenumber -le 49999999) -or ([long]$user.employeenumber -ge 95000000 -and [long]$user.employeenumber -le 96999999)) {                            
                    $FinalFilteredUsers+=$user
                }
             }#end foreach
        }#end else

    }#End Begin

    PROCESS {
        #Create users as objects for output here...
        if (!$DoNotDisplayUsers){
            $FinalFilteredUsers
        }

    
    }#End PROCESS

    END {            
        if ($usertype -eq "Staff") {
            write-output "$($FinalFilteredUsers.count) STAFF users are able to be deleted from Active Directory"
        } else {
            write-output "$($FinalFilteredUsers.count) STUDENT users are able to be deleted from Active Directory"
        }    
    }#End END
}#End DeProvision-User

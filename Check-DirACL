<#
.Synopsis
Checks a user account to see if they have certain permissions on a directory
.DESCRIPTION
Checks a user account to see if they have one of three basic NTFS permissions on a directory (Including inheritance)
.PARAMETER DirectoryToCheck
Type the name of the directory to which you wish to determine the file permissions on.  eg c:\MyDirectory or \\Server\share$\Dir1
.PARAMETER ACLToCheck
Which basic NTFS permission will be checked.  Select from FullControl, ReadAndExecute, or Modify.
.PARAMETER UserAccount
This is the account name that you wish to check has permissions.  Do not use any back-slashes or forward-slashes and do not prefix with a domain.
.PARAMETER Domain
If you do not specify a domain, then the user account specified will be assumed to be a local computer account.  If you are checking domain accounts then enter your domain netbios name here.
.EXAMPLE
Check-DirACL -UserAccount BloggsF -DirectoryToCheck C:\MyFolder -ACLToCheck Modify

The above example will display the directory being checked, the username, the permissions being checked and if the permissions are already set for that user or not.  In addition, because the domain parameter was not specified, the user account being checked is assumed to exist on the local computer.
.EXAMPLE
$results = Check-DirACL -UserAccount BloggsF,GreenD,SinatraF -DirectoryToCheck \\server\share\dir -ACLToCheck Modify -Domain MyDomain

foreach ($object in $results) {
    if ($object.permissionsalreadyset) {
        #Do something...
    } 
}

The above example shows how you might use this in a script.  Three usernames are piped to Remediate-DirACL and if 'Modify' permissions are already set for any of the piped users on the specified directory then do something...
.NOTES
Version: 1.0
Date: 16 September 2014
Created By: OH
.LINK
http://www.fearthemonkey.co.uk
.LINK
https://github.com/ozthe2/Powershell.git
.LINK
Set-DirACL
#>
function Check-DirACL {
    [CmdletBinding(SupportsShouldProcess=$true,                  
                  ConfirmImpact='Medium')]
    [OutputType([psobject])]
    Param
    (
        # Param1
        [Parameter(Mandatory=$true, 
                   ValueFromPipeline=$true,
                   ValueFromPipelineByPropertyName=$true,  
                   Position=0)]              
        [Alias("SAMAccountName","UserName","Name")] 
        [string[]]
        $UserAccount,

        # Param2
        [Parameter(Mandatory=$true,  
                   Position=0)]
        [ValidateNotNull()]
        [ValidateNotNullOrEmpty()]
        [String]
        $DirectoryToCheck,

        # Param3
        [Parameter(Mandatory=$true)]        
        [AllowNull()]        
        [AllowEmptyString()]        
        [ValidateSet("ReadAndExecute", "Modify", "FullControl")]
        [string]
        $ACLToCheck,

        # Param4 If not specified will assume user is BuiltIn\Username
        [parameter(Mandatory=$false)]                         
        [String]        
        $Domain = $env:COMPUTERNAME
    )
      
    BEGIN {}
  
    PROCESS {             
            
        foreach ($User in $UserAccount) {        
            
            #clean up the account name - remove any forward or backslashes 
            if ($User -like "*\*") {
                $User = $User.Split("\")[1]
            }

            if ($User -like "*/*") {
                $User = $User.Split("/")[1]
            }
            $user = $user.Replace("/","")
            $user = $user.Replace("\","")

            #clean up the domain name - remove any forward or backslashes or periods 
            if ($domain -like "*.*") {
                $domain = $domain.Split(".")[0]
            }

            $domain = $domain.Replace("/","")
            $domain = $domain.Replace("\","")
            $domain = $domain.Replace(".","")        
        
            #Build fullname in format of domain\username
            $FullUserName = ($domain + "\" + $User)   

            #Get the current ACL for the directory
            $ACL = get-acl -Path $DirectoryToCheck 
            
            $ACLCorrect = $false                      

            #Check to see if Permissions are already set... 
            foreach ($a in $acl.Access) {                 
              if (($a.IdentityReference.ToString() -eq $FullUserName) -and ($a.FileSystemRights.ToString() -like "*$ACLToCheck*"))
              { 
                $ACLCorrect = $True
               } 
            } # End foreach

              #Create object for output
              $props = @{
                        'PermissionsAlreadySet' = $ACLCorrect;
                        'User' = $FullUserName;
                        'PermissionsChecked' = $ACLToCheck;  
                        'Directory' = $DirectoryToCheck                              
                        }
               $obj = New-Object -TypeName psobject -Property $props

               $obj 

        } #End ForEach  
    } # End Process

    END {}

}# End Function

<#
.Synopsis
Creates new students in A.D
.DESCRIPTION
This is the 'Master' cmdlet.  You can also pipe in a csv as long as the CSV headers match the parameter names.
Creates new students in A.D, assigns Papercut credit, adds to correct groups, configures AD. Attribs. creates HomeDir etc etc
.PARAMETER CSVUserObject
This is the output from 'Import-UserCSV' cmdlet and is a user object created from an imported CSV file.
.EXAMPLE
import-Csv C:\output.csv -Header "ID","Firstname","Surname","DOB","CourseCode","CourseDescription","UnknownField1","CourseStart","CourseEnd","UnknownField2","UnknownField3" | select -first 12 | Import-UserCSV | Create-StudentObject -verbose
.INPUTS
Accepts the PSObject output from Import-UserCSV
.NOTES
Version: 1.0
Date: 17 September 2014
Created By: OH
.LINK
http://www.fearthemonkey.co.uk
.LINK
https://github.com/ozthe2/Powershell.git
.LINK
Import-UserCSV
#>

Function Create-StudentObject {

        [CmdletBinding()]
        
        Param(              
            [PARAMETER(Mandatory=$True,
            ValueFromPipeline=$True,
            ValueFromPipelineByPropertyName=$True)]        
            [psobject[]]$CSVUserObject,

            #Path to root home dir location eg \\MyServer\Share\HomeDirs
            [PARAMETER(Mandatory=$False)]
            [String]
            $RootHomeDirLocation = "\\MyServer\Share\HomeDirs",

            #The mail domain including the @ eg "@wingtip.pri"
            [PARAMETER(Mandatory=$False)]
            [String]
            $MailDomain = "@wingtip.pri",

            #Path to OU where users will be created eg "OU=Users,OU=Main,DC=wingtip,DC=pri"  
            [PARAMETER(Mandatory=$False)]
            [String]
            $Path = "OU=Users,OU=Main,DC=wingtip,DC=pri"
        )

    BEGIN {

        #Log locations for the logging function parameter
        $LogLocation = "To Be Completed"
        $ErrorLogLocation = "To Be Completed" 

        #Any ACL's that cannot be set on the home directory will have the associated username
        #stored in this array for processing in the 'End {}' section of this function.
        #This is because for some reason the acl on home dirs fails to be set on our NAS unless there is
        #a small delay - but not always!
        $ProcessACL=@()          
    }
    
    PROCESS {

        Foreach ($csvUser in $CSVUserObject) {
            $Continue = $true  
       
            #1.
            #Check to ensure that the ID number falls within the accepted range for our organisation  
            write-verbose "Checking ID number is valid for user $($csvUser.firstname) $($csvUser.Surname) ..."     
            if(!(Validate-ID -ID $csvUser.ID)) {                
                write-warning "Skipping processing of user: $($csvUser.firstname) $($csvUser.Surname)"  
                Write-warning "Reason: I.D number is not valid."               
                break;
            }
            write-verbose "ID Number is OK"
            
            #2.
            # Check that DOB is present, if not, set to a specified valid DOB so that user processing can continue.
            write-Verbose "Checking that the Date of Birth is present for user: $($csvUser.firstname) $($csvUser.Surname)..."
            #True = Missing DOB, $False = DOB present
            if (Validate-IsEmpty -Text $csvUser.dob ) {
                Write-Warning "The Date of Birth field is missing for $($csvUser.Firstname) $($csvUser.Surname)...populating with default date of: 16/06/1666"            
                $csvUser.DOB = '16/06/1666'
            } else {
                write-verbose "Date of Birth is present."
            }
            
            #3.
            #Validate Date of Birth
            #Ensures that the DOB is in UK format.
            $csvUser.dob = Verify-Date -Date $csvUser.dob
            if ($csvuser.dob -eq $NULL) {
                write-warning "Skipping processing of user: $($csvUser.firstname) $($csvUser.Surname)."
                Write-warning "Reason: Date of Birth date validation failed." 
                break;
            }      
            
            #4.
            #Ensure that there are no strange characters in the surname
            Write-verbose "Stripping out illegal characters from surname..."
            $csvUser.Surname = Convert-ToFriendlyName -Text $csvUser.Surname
            Write-verbose "Done."

            #5.
            #Create the student username made up of the first three chars of the surname followed by the student number
            write-verbose "Creating Student username..."
            $Username = Create-StudentUserName -ID $csvUser.ID -Surname $csvUser.Surname
            Write-verbose "Done.  Username is: $username" 
            #Make the username a property of the current object
            $csvuser | add-member -NotePropertyMembers @{"Username" =$Username}

            #5a.
            #Set account expiry date to UK format and add 14 days to the course end date for a bit of leeway.
            $AdjustedCourseExpiryDate = (get-date (Verify-Date -Date $csvUser.CourseEnd)).AddDays("14")

            #6.
            #Add other essential properties to the current object as this object will be passed to another function that requires them.
            $csvuser | add-member -NotePropertyMembers @{"HomeDirectory" = ($RootHomeDirLocation + "\" + $username)}
            $csvuser | add-member -NotePropertyMembers @{"EmailAddress" = ($csvuser.username + $MailDomain)}
            $csvuser | add-member -NotePropertyMembers @{"Path" = $Path}
            #$csvuser | add-member -NotePropertyMembers @{"AccountExpirationDate" = (Get-Date ($csvUser.CourseEnd)).AddDays(14)}
            $csvuser | add-member -NotePropertyMembers @{"AccountExpirationDate" = $AdjustedCourseExpiryDate}
            $csvuser | add-member -NotePropertyMembers @{"AccountPassword" = (ConvertTo-SecureString (get-date ($csvUser.dob) -format "ddMMyyyy") -AsPlainText -force)}
            $csvuser | add-member -NotePropertyMembers @{"DisplayName" = ($CSVUser.Surname + ", " + $CSVUser.Firstname + " (" + $CSVUser.id + ")")}
            $csvuser | add-member -NotePropertyMembers @{"UserPrincipalName" = ($csvuser.username + $MailDomain)}                         
       
            #7.
            #Check to see if the CourseCode-xxx group exists first, otherwise create it...
            #Create the correct Course group name as per our naming standards for Active Directory.                
            $CourseGroup = ("CourseCode-" + $csvuser.coursecode.substring(0,3)) 

            write-verbose "Checking to see if the group $CourseGroup already exists..."
            try {
                $result = Get-ADGroup -Identity $coursegroup
                write-verbose "Group already exists - no group creation is necessary."
            } catch {
                write-warning "The group: $CourseGroup does not exist in Active Directory."
                Write-warning "Attempting to create the group..."
                $result = Create-ADGroup -GroupName $coursegroup
                if (!($result)){
                    write-warning "Skipping processing of user: $($csvUser.firstname) $($csvUser.Surname)."
                    Write-warning "Reason: Creation of new group in Active Directory failed." 
                    Write-warning "The error received was: $result"
                    break;
                } else {
                    write-verbose "New Group created succesfully"
                } 
            }#end catch

            #8.
            #See if this user already exists in Active Directory.  If they exist, then the $ADUser var contains an object that has a selection of 
            #properties from the Active Directory user account.  (Use $ADUser | GM to see properties returned.)
            $ADUser = Search-UserInAD -ID $csvUser.ID            
            
            #9.
            # **** CREATE A NEW USER ROUTINE STARTS HERE ****
            #The user was not found in Active Directory so create a new user.
            if($ADUser.SamAccountName -eq $NULL) {
                Write-warning "The user: $($csvuser.Username) cannot be found in Active Directory."
                Write-verbose "Creating new user account..."
                # Create a new user in Active Directory
                $Result = Create-NewADUser -UserObject $csvuser
                #If user creation failed...
                if ($Result -ne $true) {
                    write-warning "Skipping processing of user: $($csvUser.firstname) $($csvUser.Surname)."
                    Write-warning "Reason: Creation of user in Active Directory failed." 
                    Write-warning "The error received was: $result"
                    break;
                }
                write-verbose "New user: $($csvuser.username) created in Active Directory."
                #Create a new home directory for the new user
                if (!(Test-Path ($csvuser.HomeDirectory))) {                    
                      try {
                        write-verbose "Attempting to create Home Directory: $($csvuser.HomeDirectory)"
                        New-Item ($csvuser.HomeDirectory) -type directory -ea Stop -ev x | Out-Null
                        write-verbose "Directory successfully created."
                      } catch {
                            write-warning "Skipping processing of user: $($csvUser.firstname) $($csvUser.Surname)."
                            Write-warning "Reason: Unable to create home directory: $($csvuser.HomeDirectory)."
                            break;
                      }   
                } else {
                    write-warning "Skipping processing of user: $($csvUser.firstname) $($csvUser.Surname)."
                    Write-warning "Reason: The home directory $($csvuser.HomeDirectory) already exists."
                    Write-warning "This should be a new user so the directory should not exist!" 
                    Write-warning "Processing is, however,  partially complete - the user has been created in Active directory."
                    break;
                  }

                #Set the ACL for the new home directory
                try {
                    Write-verbose "Setting ACL on directory..."
                    $csvUser.username | Set-DirACL -DirectoryToModify $csvuser.HomeDirectory -ACLToAdd Modify -Domain wingtip -ea Stop -ev x
                    Write-verbose "ACL set."
                } catch {                    
                    Write-warning "Reason: Unable to set ACL for $($csvuser.username) on directory $($csvuser.homedirectory)"
                    write-warning "Will attempt to try again at the end of all user-data processing."
                    #Add the user to the array for post processing
                    $ProcessACL+=$Username;
                }
            } # End if
                        
            #10.
            # **** USER ALREADY EXISTS IN A.D ROUTINE STARTS HERE ****
            #The user was found and therefore already exists in Active Directory - so let's move on with the next part of the processing...
            Write-verbose "User $Username already exists in Active Directory - skipping creation of new user."
            if($ADUser.SamAccountName) {
                Write-verbose "Processing next stage..."
                
                #Check that user account expiry date is correct.  This is an existing user on a new course so this may need updating.                                
                #We need to subtract 1 as for some the date presented is 1 day ahead."
                $DateADAccExpires = (get-date $ADUser.accountexpirationdate).AddDays("-1")
                                  
                write-verbose "Checking account expiry date is correct..."
                if ((get-date $AdjustedCourseExpiryDate) -gt (get-date $DateADAccExpires)) {
                    write-warning "Expiry date requires adjustment"
                    try {
                        Set-ADAccountExpiration -Identity $username -DateTime $AdjustedCourseExpiryDate.AddDays("1") -ea Stop -ev x                       
                        write-verbose ("Changed expiration date from: " + (get-date $DateADAccExpires -Format "dd/MM/yyyy") + " to: " + (get-date $AdjustedCourseExpiryDate -Format "dd/MM/yyyy"))
                    } catch {
                        write-warning "An error occured trying to change the account expiration date"
                        $x.errormessage                        
                    }#end catch
                } else {
                    write-verbose "No account expiry adjustment required."
                }#end else
                
                
            } #end if

            #11.
            # **** NEW USERS AND EXISTING USERS ****
            
            #a. Update ADUser variable
            #b. Add user to groups
            #c. Enable account            

            #a.
            #Update ADUser variable now that a new user may have been created
            #This is not efficient as this has already been done once..look into improving this in rev.2 of this script.
            $ADUser = Search-UserInAD -ID $csvUser.ID                       
                        
            #b.
            #Add user to groups
            #Check to see if user is already a member of the coursecode-xxx and account-students group...
            $GroupMembership=@()  
            $CourseGroups=@()
            #Populate $CourseGroups with the groups that the user should be a member of...
            $CourseGroups+= $CourseGroup
            $CourseGroups+= 'Account-Students'
                 
            #Determine which groups user is already a member of and add to the array
            foreach ($Group in $ADUser.memberof) {                
                $GroupMembership+= $Group.split(",").Substring(3)
            }

            write-verbose "Checking for group membership..."                
            foreach ($MandatoryGroup in $CourseGroups ) {
                if ($GroupMembership -notcontains $MandatoryGroup) {
                    write-verbose "Adding user to group: $MandatoryGroup"
                    $result = $MandatoryGroup | Add-UserToADGroup -UserAccount $csvUser.username
                    if ($result) {
                        write-verbose "Successfully added user to group:$MandatoryGroup"
                    } else {
                        write-warning "An error occurred - unable to add user: $Username to group: $CourseGroup"
                        write-warning "The error returned was : $result"
                    }#End else
                } else {
                    write-verbose "User is already a group member of: $MandatoryGroup"
                }#end else
            }#end foreach

            #c.
            #Enable the user account
            if ($ADUser.enabled) {
                write-verbose "User account is already enabled"
            } else {
                write-verbose "Account is disabled.  Attempting to enable user account..."
                try {
                    Enable-ADAccount -Identity $aduser.samaccountname -ea Stop -ev x
                    write-verbose "Account enabled for $username"
                } catch {
                    write-error "Unable to enable the user account."
                    write-error "The error was: $x.errorrecord"
                }
            } #end else

            
           

            
            
            



           
        } # End Foreach 
        write-verbose "---------------------------------------------"      
        Write-verbose "`n"





    } # End process
    
    END {
        #We need to introduce a delay before adding home directory ACL's as for some reason they do not
        #always get created on the NAS without this delay.
        #Only if there is something in the array...
        if ($ProcessACL.count -gt 0 ) {           
            $TimeNow=get-date -Format "HH:mm"      
            Write-output "Waiting 5 minutes before attempting ACL set on home directories.  Time Now: $TimeNow" 
            # 5 Minute delay...  
            start-sleep -s 300

            #Process Home-Dir ACL's...
            foreach($user in $ProcessACL) {
                #Set the ACL for the new home directory
                $HomeDirectory = ($RootHomeDirLocation + "\$user")
                try {
                    Write-verbose "Attempting to set ACL on directory for user: $user on $HomeDirectory"
                    $User | Set-DirACL -DirectoryToModify $HomeDirectory -ACLToAdd Modify -Domain wingtip -ea Stop -ev x
                    Write-verbose "ACL set successfully."
                } catch {                    
                    Write-warning "Reason: Unable to set ACL for $user on directory $HomeDirectory"
                    write-warning "This was the second attempt that failed, further investigation will be necessary."
                    break;
                }#End catch
            }#End foreach
        }#End if
    }#End END
} # End Function



# --- TESTING ---

import-Csv C:\output.csv -Header "ID","Firstname","Surname","DOB","CourseCode","CourseDescription","UnknownField1","CourseStart","CourseEnd","UnknownField2","UnknownField3" | select -first 15 | Import-UserCSV | Create-StudentObject -verbose


#help Create-StudentObject -full


<#
To Do:
------
1. Include logging (write-Log)

#>
